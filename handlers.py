from aiogram import F, Router
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.types import Message, CallbackQuery
import keyboards as kb
from aiogram.types import ReplyKeyboardRemove
import random
from config import PHOTO_IDS, HOT_IDS, TEXT_LOADING, TEXT_LOVE, TEXT_TRUE, Y_TOKEN, DATE_LIST, START_DATE, \
    AWS_ACCESS_KEY_ID, AWS_ACCESS_SECRET_KEY, BUCKET_NAME, TODO_FILE, SERVICE_NAME, ENDPOINT_URL
import yandex_music
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from yandex_music import Client
from datetime import datetime, date
import boto3
import json
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import asyncio
router = Router()


class TodoStates(StatesGroup):
    waiting_for_task = State()
    waiting_for_delete = State()


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è S3 –∫–ª–∏–µ–Ω—Ç–∞
s3 = boto3.client(
    service_name=SERVICE_NAME,
    endpoint_url=ENDPOINT_URL,
    aws_access_key_id=AWS_ACCESS_KEY_ID,
    aws_secret_access_key=AWS_ACCESS_SECRET_KEY
)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
async def load_todos():
    try:
        response = s3.get_object(Bucket=BUCKET_NAME, Key=TODO_FILE)
        return json.loads(response['Body'].read())
    except:
        return []


async def save_todos(todos):
    try:
        for i, task in enumerate(todos, 1):
            task["id"] = i
        s3.put_object(
            Bucket=BUCKET_NAME,
            Key=TODO_FILE,
            Body=json.dumps(todos)
        )
        return True
    except Exception as e:
        print(f"Error saving todos: {e}")
        return False


@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç –º–æ—è –ª—é–±–æ–≤—å!‚ù§Ô∏è –Ø –Ω–∞–ø–∏—Å–∞–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞ —Å —Ü–µ–ª—å—é –¥–µ–ª–∞—Ç—å —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω–æ, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –º–µ–Ω—è –Ω–µ—Ç—É(\n'
        '–¢—ã –≤—Å–µ–≥–¥–∞ –º–µ–Ω—è –∑–∞—Ä—è–∂–∞–µ—à—å, –ø–æ–∑–≤–æ–ª—è—è –º–Ω–µ –∏–º–µ—Ç—å —Å–∏–ª—ã –¥–ª—è –ø–æ—á—Ç–∏ –ª—é–±—ã—Ö –º–æ–∏—Ö —Å—Ç—Ä–µ–º–ª–µ–Ω–∏–π... '
        '–ò –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —É –º–µ–Ω—è —Ç–∞–∫–æ–≥–æ –Ω–µ –±—ã–ª–æ –Ω–∏–∫–æ–≥–¥–∞üòÆ\n'
        '–¢–≤–æ—è –∑–∞–±–æ—Ç–∞ –æ–±–æ –º–Ω–µ, —Ç–≤–æ–π –Ω–µ–≤–µ—Ä–æ—è—Ç–Ω—ã–π —É–º –∏ —Ç–≤–æ–∏ —Å—Ç—Ä–µ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ–¥—Ç–∞–ª–∫–∏–≤–∞—é—Ç –Ω–∞ —Ç–æ, '
        '—á—Ç–æ–±—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞–¥ —Å–æ–±–æ–π, —É–¥–∏–≤–ª—è—è –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ —Ç–µ–±—è!!!\n'
        '–î–∞–≤–∞–π —è –ø–æ–ø—Ä–æ–±—É—é –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–µ–±–µ –º–∞–ª–µ–Ω—å–∫—É—é —ç–∫—Å–∫—É—Ä—Å–∏—é –ø–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É —ç—Ç–æ–π –±–∞–Ω–¥—É—Ä–∏–Ω—ã, '
        '–∞ —Ö–æ—Ç—è, –ø–æ—Ç—ã–∫–∞–π –∏ —É–∑–Ω–∞–µ—à—å)\n'
        '–Ø —Ç–µ–±—è –ª—é–±–ª—é!!!‚ù§Ô∏è',
        reply_markup=kb.main_menu
    )


@router.message(F.text.in_({'–°—Å—ã–ª–æ—á–∫–∏üîó', '–§–æ—Ç–æ—á–∫–∏üì∑', '–õ—é–±–ª—éüíû', '–¢—ã–∫–Ω–∏üìå', '–Ø —Ä—è–¥–æ–ºü´Ç'}))
async def handle_menu(message: Message):
    teext = random.choice(TEXT_LOADING)
    await message.answer(teext, reply_markup=ReplyKeyboardRemove())
    keyboards = {
        '–°—Å—ã–ª–æ—á–∫–∏üîó': kb.links_menu,
        '–§–æ—Ç–æ—á–∫–∏üì∑': kb.photos_menu,
        '–õ—é–±–ª—éüíû': kb.love_menu,
        '–¢—ã–∫–Ω–∏üìå': kb.click_menu,
        '–Ø —Ä—è–¥–æ–ºü´Ç': kb.near_menu
    }
    keyboard = keyboards.get(message.text)
    await message.answer('–ß—Ç–æ —Ç—ã –≤—ã–±–µ—Ä–µ—à—å, –∑–æ–ª–æ—Ç–æ?‚ù§Ô∏è', reply_markup=keyboard)


@router.callback_query(F.data == 'show_random_photo')
async def handle_random_photo(callback: CallbackQuery):
    random_photo_id = random.choice(PHOTO_IDS)
    await callback.message.answer_photo(photo=random_photo_id)
    await callback.message.answer('–ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—åüòà', reply_markup=kb.photos_menu)
    await callback.answer()


@router.callback_query(F.data == 'show_hot_photo')
async def handle_random_photo(callback: CallbackQuery):
    random_hot_photo_id = random.choice(HOT_IDS)
    await callback.message.answer_photo(
        photo=random_hot_photo_id,
        has_spoiler=True
    )
    await callback.message.answer('–ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—åüòà', reply_markup=kb.photos_menu)
    await callback.answer()


@router.message(F.photo)
async def get_photo(message: Message):
    await message.answer(f'ID —Ñ–æ—Ç–æ: {message.photo[-1].file_id}')


@router.callback_query(F.data == 'love_compliment')
async def handle_love(callback: CallbackQuery):
    lovetext = random.choice(TEXT_LOVE)
    await callback.answer(lovetext, show_alert=True)


@router.callback_query(F.data == 'love_confession')
async def handle_love(callback: CallbackQuery):
    lovetext2 = random.choice(TEXT_TRUE)
    await callback.answer(lovetext2, show_alert=False)


@router.callback_query(F.data == 'yandex_music')
async def handle_random_track(callback: CallbackQuery):
    client = Client(Y_TOKEN).init()
    liked_tracks = client.users_likes_tracks()
    random_track = random.choice(liked_tracks.tracks)
    full_track = client.tracks([random_track.track_id])[0]
    artists = ', '.join(artist.name for artist in full_track.artists)
    track_url = f"https://music.yandex.ru/album/{full_track.albums[0].id}/track/{random_track.track_id}"
    colon_count = track_url.count(':')
    if colon_count >= 2:
        second_colon_index = track_url.find(':', track_url.find(':') + 1)
        track_url = track_url[:second_colon_index]
    track_info = f"–≠—Ç–æ —Ç—Ä–µ–∫ –∏–∑ –º–æ–∏—Ö –ª—é–±–∏–º—ã—Ö –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏)\nüéµ {full_track.title}\nüë§ {artists}\nüîó {track_url}"
    await callback.message.reply(track_info)
    await callback.message.answer('–ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?üòä', reply_markup=kb.click_menu)
    await callback.answer()


@router.callback_query(F.data == 'dates')
async def handle_click_me(callback: CallbackQuery):
    today = date.today()
    days_together = (today - START_DATE).days
    random_message = random.choice(DATE_LIST)
    await callback.message.answer(
        f"–ú—ã –≤–º–µ—Å—Ç–µ {days_together} –¥–Ω–µ–π ‚ù§Ô∏è\n{random_message}"
    )
    await callback.message.answer(
        '–ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?üòä',
        reply_markup=kb.click_menu
    )
    await callback.answer()


@router.callback_query(F.data == "write_task")
async def handle_new_task(callback: CallbackQuery, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    await state.update_data(last_message=callback.message.message_id)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    msg = await callback.message.answer("–ù–∞–ø–∏—à–∏ –∑–∞–¥–∞—á–∫—É, –∑–æ–ª–æ—Ç—Ü–µ)")
    await state.update_data(prompt_message=msg.message_id)
    await state.set_state(TodoStates.waiting_for_task)


@router.message(TodoStates.waiting_for_task)
async def save_task(message: Message, state: FSMContext):
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–¥–∞—á–∏
        todos = await load_todos()

        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
        new_task = {
            "id": len(todos) + 1,
            "text": message.text,
            "author": message.from_user.full_name,
            "date": datetime.now().isoformat()
        }

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
        todos.append(new_task)

        # –î–µ–ª–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–ø—ã—Ç–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–∏–º–∏—Å—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        max_retries = 3
        save_success = False

        for attempt in range(max_retries):
            save_success = await save_todos(todos)
            if save_success:
                break
            # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
            await asyncio.sleep(2 ** attempt)

            # –ï—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ –æ—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫
            if attempt == max_retries - 1 and not save_success:
                todos = await load_todos()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
                todos.append(new_task)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –∑–∞–Ω–æ–≤–æ
                save_success = await save_todos(todos)

        if not save_success:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ ID —Å–æ–æ–±—â–µ–Ω–∏–π
        data = await state.get_data()

        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        await message.answer("–£–†–ê –£–†–ê –£–†–êüëë")
        await message.answer("–ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?üòä", reply_markup=kb.near_menu)

    except Exception as e:
        print(f"Error in save_task: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        await state.clear()


@router.callback_query(F.data == "list_task")
async def show_tasks(callback: CallbackQuery):
    todos = await load_todos()
    if not todos:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç(")
        await callback.message.answer("–ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?üòä", reply_markup=kb.near_menu)
        return
    task_list = "\n".join([
        f"{task['id']}. {task['text']} ({task['author']})"
        for task in todos
    ])
    await callback.message.answer(
        f"–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:\n\n{task_list}",
        reply_markup=kb.tasks_menu
    )


@router.callback_query(F.data == "waiting_for_delete")
async def handle_delete_request(callback: CallbackQuery):
    todos = await load_todos()
    if not todos:
        await callback.message.answer("–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç(")
        await callback.message.answer("–ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?üòä", reply_markup=kb.near_menu)
        return

    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–æ–º–µ—Ä–∞–º–∏ –∑–∞–¥–∞—á
    keyboard = InlineKeyboardBuilder()
    for task in todos:
        keyboard.button(
            text=f"{task['id']}",
            callback_data=f"delete_{task['id']}"
        )
    keyboard.button(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")
    keyboard.adjust(3)  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥

    task_list = "\n".join([
        f"{task['id']}. {task['text']}"
        for task in todos
    ])
    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∫–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è, –∑–æ–ª–æ—Ç—Ü–µ:\n\n{task_list}",
        reply_markup=keyboard.as_markup()
    )


@router.callback_query(F.data.startswith("delete_"))
async def process_delete_task(callback: CallbackQuery):
    task_id = int(callback.data.split("_")[1])
    todos = await load_todos()

    if not any(task["id"] == task_id for task in todos):
        await callback.message.answer("–ù–µ –Ω–∞—à–ª–∏ –∑–∞–¥–∞—á–∫—É(((")
        return

    todos = [task for task in todos if task["id"] != task_id]
    await save_todos(todos)
    await callback.message.answer("–£–¥–∞–ª–∏–ª–∏, —Å–æ–ª–Ω—Ü–µüíñ")
    await callback.message.answer("–ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?üòä", reply_markup=kb.near_menu)


@router.callback_query(F.data == 'back')
async def back_to_start(callback: CallbackQuery):
    await callback.message.answer(
        '–ß—Ç–æ —Ç–µ–ø–µ—Ä—å —Ö–æ—á–µ—à—å –≤—ã–±—Ä–∞—Ç—å?üòä',
        reply_markup=kb.near_menu
    )
    await callback.answer()


@router.callback_query(F.data == 'back_start')
async def back_to_start(callback: CallbackQuery):
    await callback.message.answer(
        '–ê —á—Ç–æ —Å–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∑–æ–ª–æ—Ç—Ü–µ?‚ù§Ô∏è',
        reply_markup=kb.main_menu
    )
    await callback.answer()